# PSUC IA-2

Lab 4: 1-D ARRAYS

**Write C++ programs to do the following:**

1. Find the largest and smallest element in an array.

```cpp
#include<iostream>
using namespace std;
int main()
{
    int arr[50],n,maxvalue,minvalue,i;
    cout<<"Enter The Number of Limit="<<endl;
    cin>>n;
    cout<<"Enter The Numbers of The Array="<<endl;
    for(i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    maxvalue=arr[0];
    minvalue=arr[0];
    for(i=0;i<n;i++)
    {
        if(arr[i]>maxvalue)
        {
            maxvalue=arr[i];
        }
        
    }
    for(i=0;i<n;i++)
    {
        if(arr[i]<minvalue)
        {
            minvalue=arr[i];

        }

    }
    cout<<"Largest Number="<<maxvalue<<endl;
    cout<<"Smallest Number="<<minvalue;
}
```

1. To insert an element into an array and to delete an element from an array

```cpp
#include<iostream>
using namespace std;
int main()
{
    int arr[50],n,i,ele,ind;
    cout<<"Enter The Limit of Array="<<endl;
    cin>>n;
    cout<<"Enter The Element to be inserted in the array="<<endl;
    cin>>ele;
    cout<<"Enter The Index to be Inserted="<<endl;
    cin>>ind;
    cout<<"Enter The Element of the Array="<<endl;
    for(i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(i=n-1;i>=ind;i--)
    {
        arr[i+1]=arr[i];
    }
    arr[ind]=ele;
    n=n+1;
    cout<<"The New Array"<<endl;
    for(i=0;i<n;i++)
    {
        cout<<arr[i]<<endl;
    }

}
```

```cpp
#include<iostream>
using namespace std;
int main()
{
    int n,arr[50],i,ele,j,flag=0;
    cout<<"Enter The Limit of The Array="<<endl;
    cin>>n;
    cout<<"Enter The Element to be Deleted="<<endl;
    cin>>ele;
    cout<<"Enter The Elements of The Array="<<endl;
    for(i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(i=0;i<n;i++)
    {
        if(ele==arr[i])
        {
            flag=1;
            break;
        }
    }
    if(flag==1)
    {
        for(j=i;j<n-1;j++)
        {
            arr[j]=arr[j+1];
        }
        n=n-1;
        cout<<"The Modified Array="<<endl;
        for(i=0;i<n;i++)
        {
            cout<<arr[i]<<endl;
        }

    }
    else
    {
        cout << "Element not found in the array." << endl;
    }

}
```

1. To print all the prime numbers in a given array.

```cpp
#include<iostream>
using namespace std;

int main() {
    int n, arr[50];

    // Input the size of the array
    cout << "Enter the limit of the array: ";
    cin >> n;

    // Input the elements of the array
    cout << "Enter the elements of the array: " << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Output the prime numbers from the array
    cout << "Prime numbers in the array are: ";
    for (int i = 0; i < n; i++) {
        int flag = 0; // To count the number of divisors

        // Check if the number is less than or equal to 1, it's not prime
        if (arr[i] > 1) {
            // Check divisibility from 2 to arr[i]/2
            for (int j = 2; j <= arr[i] / 2; j++) {
                if (arr[i] % j == 0) {
                    flag = 1; // Found a divisor, so it's not prime
                    break;
                }
            }

            // If no divisors were found (flag is still 0), it's a prime number
            if (flag == 0) {
                cout << arr[i] << " ";
            }
        }
    }
    cout << endl;

    return 0;
}

```

1. To arrange the array elements in ascending/descending order using Selection/Bubble sort.

```cpp

```

1. To insert an element into a sorted array (after insertion remains sorted)

```cpp
#include<iostream>
using namespace std;
int main()
{
    int arr[50],n,i,ind,ele;
    cout<<"Enter The Limit of Elements="<<endl;
    cin>>n;
    cout<<"Enter The Element to be Inserted="<<endl;
    cin>>ele;
    cout<<"Enter The Elements of An Array="<<endl;
    for(i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(i=0;i<n;i++)
    {
        if(arr[i]>ele)
        {
            break;
        }
    }
    ind =i;
    for(i=n-1;i>=ind;i--)
    {
        arr[i+1]=arr[i];
    }
    arr[ind]=ele;
    n=n+1;
    cout<<"The Modified Array="<<endl;
    for(i=0;i<n;i++)
    {
        cout<<arr[i]<<endl;
    }
}
```

1. To search for a given number in an array using Binary Search method

```cpp
#include<iostream>
using namespace std;
int main()
{
    int n,arr[50];
    cout<<"Enter The Limit of The Array="<<endl;
    cin>>n;
    int data;
    cout<<"Enter The Data to Be Searched="<<endl;
    cin>>data;
    bool found=false;
    int l=0,r=n-1,mid;
    cout<<"Enter The Array Elements"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    while(l<=r)
    {
        mid=(l+r)/2;
        if(data==arr[mid])
        {
            cout<<"Key Element Found"<<arr[mid];
            exit(0);
        }
        else if(data<arr[mid])
        {
            r=mid-1;
        }
        else if(data>arr[mid])
        {
            l=mid+1;
        }
    }

        cout<<"Element Not Present";
    }

```

1. To delete all the duplicate elements of an array.

[Ex: input array [3, 4, 1, 3, 5, 5, 3] ; output array [ 3, 4, 1, 5]

```cpp
#include<iostream>
using namespace std;

int main() {
    int n, arr[50], result[50], k = 0;

    // Input the size of the array
    cout << "Enter the limit of the array: ";
    cin >> n;

    // Input the elements of the array
    cout << "Enter the elements of the array: " << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Remove duplicates and store unique elements in 'result' array
    for (int i = 0; i < n; i++) 
      {
        int j;
        // Check if arr[i] is already in the result array
        for (j = 0; j < k; j++) 
           {
            if (arr[i] == result[j]) 
            {
                break; // If duplicate is found, break the inner loop
            }
        }
        // If arr[i] is not found in result, add it
        if (j == k) 
          {
            result[k] = arr[i];
            k++; // Increment size of result array
        }
    }

    // Output the modified array with no duplicates
    cout << "The array after removing duplicates is: ";
    for (int i = 0; i < k; i++) {
        cout << result[i] << " ";
    }
    cout << endl;

    return 0;
}

```

**Lab 5: 2-D ARRAYS**

**Write C++ programs to do the following:**

1. To read 2 matrices and add and subtract them. Display all the matrices.

```cpp
#include<iostream>
using namespace std;
int main()
{
    int i,j,m,n,a[100][100],b[100][100],sum[100][100];
    cout<<"Enter The Dimension for A"<<endl;
    cin>>m>>n;
    cout<<"Enter The Elements of 1st Matrix="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
            cin>>a[i][j];
    }
    cout<<"Enter The Elements of 2nd Matrix="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cin>>b[i][j];
        }
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            sum[i][j]=a[i][j]+b[i][j];
        }
    }
    cout<<"Sum of Two Matrices="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<sum[i][j]<<" ";
            if(j==n-1)
                cout<<endl;
        }
    }
}
```

```cpp
#include<iostream>
using namespace std;
int main()
{
    int i,j,m,n,a[100][100],b[100][100],sum[100][100];
    cout<<"Enter The Dimension for A"<<endl;
    cin>>m>>n;
    cout<<"Enter The Elements of 1st Matrix="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
            cin>>a[i][j];
    }
    cout<<"Enter The Elements of 2nd Matrix="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cin>>b[i][j];
        }
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            sum[i][j]=a[i][j]-b[i][j];
        }
    }
    cout<<"Difference of Two Matrices="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<sum[i][j]<<" ";
            if(j==n-1)
                cout<<endl;
        }
    }
}

```

1. To read 2 matrices and multiply them. Display all the matrices.

```cpp
#include<iostream>
using namespace std;
int main()
{
    int i,j,m,n,a[100][100],b[100][100],sum[100][100];
    cout<<"Enter The Dimension for A"<<endl;
    cin>>m>>n;
    cout<<"Enter The Elements of 1st Matrix="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
            cin>>a[i][j];
    }
    cout<<"Enter The Elements of 2nd Matrix="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cin>>b[i][j];
        }
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            sum[i][j]=a[i][j]*b[i][j];
        }
    }
    cout<<"Multiplication of Two Matrices="<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<sum[i][j]<<" ";
            if(j==n-1)
                cout<<endl;
        }
    }
}

```

1. To compute the row sum and column sum of a given matrix.

```cpp
#include<iostream>
using namespace std;
int main()
{
   int a[100][100],i,j,n,q,rsum=0,csum=0,m;
   cout<<"Enter The Number of Rows"<<endl;//Reading The Order of Array
   cin>>m;
   cout<<"Enter The Number of Colums="<<endl;
   cin>>n;
   //Reading of Matrix
   cout<<"Enter Elements of Matrix="<<endl;//Input of Matrix
   for(i=0;i<m;i++)
   {
       for(j=0;j<n;j++)
       cin>>a[i][j];
   }
   //Displaying The Array
   for(i=0;i<m;i++)
   {
       for(j=0;j<n;j++)
       {
            cout<<a[i][j]<<"  ";
            if(j==n-1)
            cout<<endl;
       }
   }
   for(i=0;i<n;i++)
   {
            rsum=0;
            csum=0;
           for(j=0;j<m;j++)
           {
               csum=csum+a[j][i];
           }
           cout<<i<<"Column Sum="<<csum<<endl;

    }
    for(i=0;i<m;i++)
    {
          rsum=0;
          for(j=0;j<m;j++)
          {
               rsum=rsum+a[i][j];
          }
          cout<<i<<"Row Sum="<<rsum<<endl;
    }
    }
//rsum=rsum+a[i][j];

```

1. To check whether the given matrix is a Lower triangular matrix.

Ex:	1	0	0

2	3	0

4	5	6

```cpp
#include<iostream>
using namespace std;
int main()
{
   int a[100][100],i,j,n,q;
   cout<<"Enter The Order of The Array"<<endl;//Reading The Order of Array
   cin>>q;
   //Reading of Matrix
   cout<<"Enter Elements of Matrix="<<endl;//Input of Matrix
   for(i=0;i<q;i++)
   {
       for(j=0;j<q;j++)
       cin>>a[i][j];
   }
   //Displaying The Array
   for(i=0;i<q;i++)
   {
       for(j=0;j<q;j++)
       {
            cout<<a[i][j]<<"  ";
            if(j==q-1)
            cout<<endl;
       }
   }
   for(i=0;i<q;i++)
   {
      for(j=i+1;j<q;j++)
      {

        if(a[i][j]!=0)
        {
           cout<<"Non Lower Triangle"<<endl;
           return 0;
        }
      }
   }
   cout<<"Lower Triangle Matrix"<<endl;
}

```

```cpp

#include<iostream>
using namespace std;
int main()
{
   int a[100][100],i,j,n,q;
   cout<<"Enter The Order of The Array"<<endl;//Reading The Order of Array
   cin>>q;
   //Reading of Matrix
   cout<<"Enter Elements of Matrix="<<endl;//Input of Matrix
   for(i=0;i<q;i++)
   {
       for(j=0;j<q;j++)
       cin>>a[i][j];
   }
   //Displaying The Array
   for(i=0;i<q;i++)
   {
       for(j=0;j<q;j++)
       {
            cout<<a[i][j]<<"  ";
            if(j==q-1)
            cout<<endl;
       }
   }
   for(i=0;i<q;i++)
   {
      for(j=0;j<i;j++)
      {

        if(a[i][j]!=0)
        {
           cout<<"Non Upper Triangle"<<endl;
           return 0;
        }
      }
   }
   cout<<"Upper Triangle Matrix"<<endl;
}

```

1. To find whether a given matrix is symmetric or not. [Hint: A = A]
    
    T
    
    ```cpp
    //WAP to check whether the Matrix is Symmetric or not
    #include<iostream>
    using namespace std;
    int main()
    {
       int a[100][100],i,j,n,q;
       cout<<"Enter The Order of The Array"<<endl;//Reading The Order of Array
       cin>>q;
       //Reading of Matrix
       cout<<"Enter Elements of Matrix="<<endl;//Input of Matrix
       for(i=0;i<q;i++)
       {
           for(j=0;j<q;j++)
           cin>>a[i][j];
       }
       //Displaying The Array
       for(i=0;i<q;i++)
       {
           for(j=0;j<q;j++)
           {
                cout<<a[i][j]<<"  ";
                if(j==q-1)
                cout<<endl;
           }
       }
       //Checking Condition
       for(i=0;i<q;i++)
       {
          for(j=i+1;j<q;j++)
          {
    
            if(a[i][j]!=a[j][i])
            {
               cout<<"Non Symmetric Matrix"<<endl;
               return 0;
            }
          }
       }
       cout<<"It is a Symmetric Matrix"<<endl;
    }
    
    ```
    
2. To find the trace and norm of a given square matrix.

[Hint: 	Trace = sum of  principal diagonal elements

Norm = SQRT (sum of squares of the individual elements of an array)]

```cpp
#include<iostream>
#include<math.h>
using namespace std;
int main()
{
   int a[100][100],i,j,n,q,trace=0,sum=0;
   float norm;
   cout<<"Enter The Order of The Array"<<endl;//Reading The Order of Array
   cin>>q;
   //Reading of Matrix
   cout<<"Enter Elements of Matrix="<<endl;//Input of Matrix
   for(i=0;i<q;i++)
   {
       for(j=0;j<q;j++)
       cin>>a[i][j];
   }
   //Displaying The Array
   for(i=0;i<q;i++)
   {
       for(j=0;j<q;j++)
       {
            cout<<a[i][j]<<"  ";
            if(j==q-1)
            cout<<endl;
       }
   }
   //Trace
   for(i=0;i<q;i++)
   {
     for(j=0;j<q;j++)
     {

          if(i==j)
          {
          trace=trace+a[i][j];
          }
          sum=sum+a[i][j]*a[i][j];
     }
   }
   norm=sqrt(sum);

   cout<<"Trace of Matrix="<<trace;
   cout<<"Norm ="<<norm;

   }

```

**Lab 6: STRINGS**

**Write C++ programs without using STRING-HANDLING functions for the following:**

1. To count the number of words in a sentence.

```cpp
#include<iostream>
#include<string.h>
using namespace std;
int main()
{
    char str[50];
    int i=0;
    int countervalue=1;
    cout<<"Enter The String="<<endl;
    cin.get(str,50);
    while(str[i]!='\0')
    {
        if(str[i]==' '&& str[i+1]!=' ')
        {
            countervalue++;
        }
        i++;
    }
    cout<<"The Number of Words="<<countervalue<<endl;
}
```

1. To input a string and toggle the case of every character in the input string.

Ex: 	INPUT:	 aBcDe

OUTPUT:	AbCdE

```cpp
#include<iostream>
#include<iostream>
using namespace std;
int main()
{
    char str[50],temp;
    int i,n=0;
    cout<<"Enter The String"<<endl;
    cin.get(str,50);
    for(i=0;str[i]!='\0';i++)
    n++;
    for(i=0;i<n/2;i++)
    {
        temp=str[i];
        str[i]=str[n-i-1];
        str[n-i-1]=temp;
    }
    cout<<"Reversed String="<<str<<endl;
}
```

1. To search for a given sub string in the main string.
2. To check whether the given string is a palindrome or not.

```cpp
#include<iostream>
#include<string.h>
using namespace std;
int main()
{
   char str[30];
   int i,n,j,len=0,flag=1;
   cout<<"\nEnter the string:";
   cin.get(str,30);

//find the string length
   for(i=0;str[i]!='\0';i++)
           len++;	

   for(i=0;i<len/2;i++)
{
     if(str[i]!=str[len-i-1])
    {
            flag=0;
            break;
  }
}
if(flag==1)    
    cout<<"\nIts a  Palindrome";
else     
    cout<<"\nNot a Palindrome";
}

```

1. To convert a given string representing a number to an integer.

```cpp
    #include<iostream>
    using namespace std;
    int main()
    {
        char num[100];
        int dec = 0, i, len=0;

        cout<<"Enter a number: \n";
        cin.get(num,100);

        //find the string length
        for(i=0;num[i]!='\0';i++)
            len++;

        for(i=0; i<len; i++)
            dec = dec * 10 + ( num[i] - '0' );
        
        cout<< "The number + 1 is:" <<dec+1 ;

    }
```
